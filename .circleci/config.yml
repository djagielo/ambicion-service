# Java Gradle CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-java/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:15.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run:
          name: Tests
          command: ./gradlew test

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true

      - run: docker build -f Dockerfile-ct -t bettercode.dev/ambicion-service-tests:$CIRCLE_BRANCH .

      - run:
          name: Package Jar
          command: ./gradlew bootJar

      - run: docker build -t bettercode.dev/ambicion-service:$CIRCLE_BRANCH .

      - run:
          name: component tests
          command: | 
            docker-compose --project-name circleci-ct -f .docker/docker-compose-component-tests.yml up -d
            
            docker container run --network container:circleci-ct_ambicion-service_1 docker.io/jwilder/dockerize \
                        -wait http://localhost:9999/actuator/health -wait-retry-interval 2s -timeout 60s
            
            docker-compose -f .docker/docker-compose-component-tests.yml exec tests ./gradlew componentTests